class Order < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Order, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def payment_intent_id: () -> String

    def payment_intent_id=: (String) -> String

    def payment_intent_id?: () -> bool

    def payment_intent_id_changed?: () -> bool

    def payment_intent_id_change: () -> [ String?, String? ]

    def payment_intent_id_will_change!: () -> void

    def payment_intent_id_was: () -> String?

    def payment_intent_id_previously_changed?: () -> bool

    def payment_intent_id_previous_change: () -> Array[String?]?

    def payment_intent_id_previously_was: () -> String?

    def payment_intent_id_before_last_save: () -> String?

    def payment_intent_id_change_to_be_saved: () -> Array[String?]?

    def payment_intent_id_in_database: () -> String?

    def saved_change_to_payment_intent_id: () -> Array[String?]?

    def saved_change_to_payment_intent_id?: () -> bool

    def will_save_change_to_payment_intent_id?: () -> bool

    def restore_payment_intent_id!: () -> void

    def clear_payment_intent_id_change: () -> void

    def total_price: () -> Integer

    def total_price=: (Integer) -> Integer

    def total_price?: () -> bool

    def total_price_changed?: () -> bool

    def total_price_change: () -> [ Integer?, Integer? ]

    def total_price_will_change!: () -> void

    def total_price_was: () -> Integer?

    def total_price_previously_changed?: () -> bool

    def total_price_previous_change: () -> Array[Integer?]?

    def total_price_previously_was: () -> Integer?

    def total_price_before_last_save: () -> Integer?

    def total_price_change_to_be_saved: () -> Array[Integer?]?

    def total_price_in_database: () -> Integer?

    def saved_change_to_total_price: () -> Array[Integer?]?

    def saved_change_to_total_price?: () -> bool

    def will_save_change_to_total_price?: () -> bool

    def restore_total_price!: () -> void

    def clear_total_price_change: () -> void

    def customer_id: () -> Integer?

    def customer_id=: (Integer?) -> Integer?

    def customer_id?: () -> bool

    def customer_id_changed?: () -> bool

    def customer_id_change: () -> [ Integer?, Integer? ]

    def customer_id_will_change!: () -> void

    def customer_id_was: () -> Integer?

    def customer_id_previously_changed?: () -> bool

    def customer_id_previous_change: () -> Array[Integer?]?

    def customer_id_previously_was: () -> Integer?

    def customer_id_before_last_save: () -> Integer?

    def customer_id_change_to_be_saved: () -> Array[Integer?]?

    def customer_id_in_database: () -> Integer?

    def saved_change_to_customer_id: () -> Array[Integer?]?

    def saved_change_to_customer_id?: () -> bool

    def will_save_change_to_customer_id?: () -> bool

    def restore_customer_id!: () -> void

    def clear_customer_id_change: () -> void

    def shipping_address_id: () -> Integer?

    def shipping_address_id=: (Integer?) -> Integer?

    def shipping_address_id?: () -> bool

    def shipping_address_id_changed?: () -> bool

    def shipping_address_id_change: () -> [ Integer?, Integer? ]

    def shipping_address_id_will_change!: () -> void

    def shipping_address_id_was: () -> Integer?

    def shipping_address_id_previously_changed?: () -> bool

    def shipping_address_id_previous_change: () -> Array[Integer?]?

    def shipping_address_id_previously_was: () -> Integer?

    def shipping_address_id_before_last_save: () -> Integer?

    def shipping_address_id_change_to_be_saved: () -> Array[Integer?]?

    def shipping_address_id_in_database: () -> Integer?

    def saved_change_to_shipping_address_id: () -> Array[Integer?]?

    def saved_change_to_shipping_address_id?: () -> bool

    def will_save_change_to_shipping_address_id?: () -> bool

    def restore_shipping_address_id!: () -> void

    def clear_shipping_address_id_change: () -> void
  end
  include GeneratedAttributeMethods
  def order_items: () -> OrderItem::ActiveRecord_Associations_CollectionProxy
  def order_items=: (OrderItem::ActiveRecord_Associations_CollectionProxy | Array[OrderItem]) -> (OrderItem::ActiveRecord_Associations_CollectionProxy | Array[OrderItem])
  def order_item_ids: () -> Array[Integer]
  def order_item_ids=: (Array[Integer]) -> Array[Integer]
  def shippings: () -> Shipping::ActiveRecord_Associations_CollectionProxy
  def shippings=: (Shipping::ActiveRecord_Associations_CollectionProxy | Array[Shipping]) -> (Shipping::ActiveRecord_Associations_CollectionProxy | Array[Shipping])
  def shipping_ids: () -> Array[Integer]
  def shipping_ids=: (Array[Integer]) -> Array[Integer]
  def shipping_state: () -> ShippingState?
  def shipping_state=: (ShippingState?) -> ShippingState?
  def build_shipping_state: (untyped) -> ShippingState
  def create_shipping_state: (untyped) -> ShippingState
  def create_shipping_state!: (untyped) -> ShippingState
  def reload_shipping_state: () -> ShippingState?
  def customer: () -> Customer
  def customer=: (Customer?) -> Customer?
  def reload_customer: () -> Customer?
  def build_customer: (untyped) -> Customer
  def create_customer: (untyped) -> Customer
  def create_customer!: (untyped) -> Customer
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  def self.with_parent: () -> ActiveRecord_Relation
  def self.sorted: () -> ActiveRecord_Relation
  def self.action_required: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def with_parent: () -> ActiveRecord_Relation

    def sorted: () -> ActiveRecord_Relation

    def action_required: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Order, Integer]
    include Enumerable[Order]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Order, Integer]
  end
end
